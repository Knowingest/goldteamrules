enemy member functions / variables:

self.hp
		self explanatory

remove_hp(amount)
	lowers unit hp.  the controller class can call this function when damage is dealt

restore_hp(amount)
	same thing in reverse

amount get_hp()
	returns self.hp of unit

self.player_damage
		this shows how much damage was just dealt to the player.  
		The controller can read this variable to find out how much damage an attack did.

self.pet_damage
	this can be used for when an attack targets the dog/sidekick character instead of the player

damage get_player_damage()
	returns self.player_damage

damage get_pet_damage()
	returns self.pet_damage



-------------------
take_turn()
	start the unit's turn.  The controller will call this function when a unit's turn starts
	inside this function, you can outline what the unit does
			maybe it deals damage based on how much hp its missing
			maybe it does a big attack that damages itself
			maybe it heals itself when its low on health

	this behaviour could be randomly generated, or maybe determined by how much hp a unit has

	maybe some special attack happens when they take more that 5 damage in one turn

	maybe it's moves cycle between a few options, based on what it did last turn.

	maybe some attacks hit the player, some hit the dog

	maybe some attacks hit both

---------------------
example, a unit could heal itself:	
		restore_hp(5)
		player_damage = 0
		pet_damage = 0

the controller would then get_hp() to see the change in hp, and treat damage == 0 as a unit not attacking that turn
---------------------
another example
		remove_hp(2)
	    player_damage = 10
	    pet_damage = 10

unit damages itself to do a powerful attack

---------------------

these functions are the framework for a unit, 
with their AI being a series of if statements inside
the take_turn() function

I think this is good for now but we could also do things like: 
make player.hp a global variable so that enemies can change
their behaviour based on player hp, or other such behaviour